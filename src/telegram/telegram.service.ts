import { Injectable, Logger } from '@nestjs/common';
import { Bot } from 'grammy';
import { SetService } from '../dlmm/set-service/set-service.service';
import { DlmmApiService } from '../dlmm/dlmm-api/dlmm-api.service';
import { DlmmService } from '../dlmm/dlmm.service';
import { WalletService } from '../wallet/wallet.service';

@Injectable()
export class TelegramService {
  private readonly logger = new Logger(TelegramService.name);
  private bot: Bot;
  private chatId = '439104348'; // üî• –¢–≤–æ–π chat ID
  private token = '946715771:AAGx300ZP_tI0LrOfbmoF20iJVyw7jTwoDk'; // üî• –¢–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞

  constructor(
    private readonly _setService: SetService,
    private readonly _dlmmApiService: DlmmApiService,
    private readonly _dlmmService: DlmmService,
    private readonly _walletService: WalletService
  ) {
    this.bot = new Bot(this.token);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    this.bot.command('start', async (ctx) => {
      if (ctx.chat?.id) {
        await this.sendWelcome(ctx.chat.id);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≤–∏–¥–∞ /set_tvl, /set_volume, /set_percent_fees
    this.bot.hears(/^\/set_(tvl|volume|percent_fees)/, async (ctx) => {
      await this.setUserCommand(ctx.message?.text);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, pool address)
    this.bot.hears(/^[1-9A-HJ-NP-Za-km-z]{44}$/, async (ctx) => {
      await this.dlmmPoolInfo(ctx.message?.text);
    });

    this.bot.command('create_wallet', async (ctx) => {
      await this.createWallet(ctx.chat.id);
    });

    this.bot.command('balance', async (ctx) => {
      await this.getWalletBalance(ctx.chat.id);
    });

    this.bot.start();
  }

  async sendWelcome(chatId: number) {
    const message = `üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ DEX Meteora!\n\nüöÄ –ö–æ–º–∞–Ω–¥—ã:\n/set_percent_fees - –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–æ—Å—Ç–∞ —Ñ–∏—Å–∏–∫–æ–≤\n`;
    await this.bot.api.sendMessage(chatId, message);
  }

  async sendMessage(message: string) {
    try {
      await this.bot.api.sendMessage(this.chatId, message, { parse_mode: 'HTML' });
      this.logger.log(`üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${message}`);
    } catch (error: any) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: ${error.message}`);
    }
  }

  async setUserCommand(command: string | undefined) {
    if (!command) {
      await this.sendMessage('üéà');
      return;
    }
    const [cmd, value] = command.split(' ');

    if (cmd === '/set_tvl' && !isNaN(Number(value))) {
      this._setService.setTvlThreshold(Number(value));
      await this.sendMessage(`‚úÖ TVL –ø–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω: $${value}`);
    } else if (cmd === '/set_volume' && !isNaN(Number(value))) {
      this._setService.setVolumeThreshold(Number(value));
      await this.sendMessage(`‚úÖ –ü–æ—Ä–æ–≥ –æ–±—ä–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω: $${value}`);
    } else if (cmd === '/set_percent_fees' && !isNaN(Number(value))) {
      this._setService.setPercentFeesUp(Number(value));
      await this.sendMessage(`‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏—Å–∏–∫–æ–≤ –∏–∑–º–µ–Ω–µ–Ω: ${value}%`);
    } else if (cmd === '/set_fees_ratio' && !isNaN(Number(value))) {
      this._setService.setFeesRatioMin(Number(value));
      await this.sendMessage(`‚úÖ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ñ–∏—Å–∏–∫–æ–≤ –∏–∑–º–µ–Ω–µ–Ω: ${value}%`);
    } else {
      await this.sendMessage('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!');
    }
  }

  async dlmmPoolInfo(poolAddress: string | undefined) {
    if (poolAddress === undefined) {
      await this.sendMessage('‚ùå –û—à–∏–±–∫–∞ –∞–¥—Ä–µ—Å—Å–∞');
      return;
    }
    const formatter = new Intl.NumberFormat('en-EN', { style: 'decimal', maximumFractionDigits: 2, useGrouping: true });
    const poolInfo = await this._dlmmApiService.getPoolInfo(poolAddress);
    //const data = await this._dlmmService.getPoolCreationTime(poolAddress);
    //const date = `${data?.days}d, ${data?.hours},${data?.minutes},${data?.seconds} `;
    const info = `
üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—É–ª–µ:
üîπ –ê–¥—Ä–µ—Å: ${poolInfo.address}
üîπ –ò–º—è: <b>${poolInfo.name}</b>
üîπ Bin: ${poolInfo.bin_step}
üîπ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: $${formatter.format(+poolInfo.liquidity)}
üîπ –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ (30m): $${formatter.format(poolInfo.volume.min_30)}
üîπ MarketCap: ${formatter.format(poolInfo.current_price * 1000000000)}
üîπ Price: ${poolInfo.current_price}
üîπ Meteora: <a href="https://app.meteora.ag/dlmm/${poolInfo.address}">Link</a>
      `;
    await this.sendMessage(info);
  }

  async createWallet(chatId: number) {
    if (!chatId) return;
    if (this._walletService.loadEncryptedWallet()) return;
    const publicKey = this._walletService.createAndEncryptWallet();
    await this.bot.api.sendMessage(chatId, `‚úÖ –ö–æ—à–µ–ª–µ–∫ —Å–æ–∑–¥–∞–Ω:\n <code>${publicKey}</code>`);
  }

  async getWalletBalance(chatId: number) {
    if (!chatId) return;
    const wallet = this._walletService.loadEncryptedWallet();
    if (!wallet) {
      await this.bot.api.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ—à–µ–ª–µ–∫.');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å SOL
    const solBalance = await this._walletService.getWalletBalance(wallet.publicKey);

    // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã SPL —Ç–æ–∫–µ–Ω–æ–≤
    const tokenBalances = await this._walletService.getTokenBalances(wallet.publicKey);

    let response = `üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞:\nüîπ SOL: ${solBalance.toFixed(8)} SOL\n\n`;
    if (tokenBalances.length > 0) {
      response += `üì¶ SPL –¢–æ–∫–µ–Ω—ã:\n`;
      tokenBalances.forEach((token) => {
        response += `üî∏ Mint: ${token.mint}\n  Amount: ${token.amount} (raw: ${token.raw})\n\n`;
      });
    } else {
      response += `üì¶ –ù–µ—Ç SPL —Ç–æ–∫–µ–Ω–æ–≤.`;
    }

    await this.bot.api.sendMessage(chatId, response);
  }
}
